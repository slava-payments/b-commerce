// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v4.25.3
// source: saga.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleUnaryCall, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "saga";

export interface SagaIdRequest {
  orderId: string;
}

export interface SagaStatusResponse {
  status: string;
  currentStep: string;
  updatedAt: string;
}

export const SAGA_PACKAGE_NAME = "saga";

function createBaseSagaIdRequest(): SagaIdRequest {
  return { orderId: "" };
}

export const SagaIdRequest: MessageFns<SagaIdRequest> = {
  encode(message: SagaIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SagaIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSagaIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSagaStatusResponse(): SagaStatusResponse {
  return { status: "", currentStep: "", updatedAt: "" };
}

export const SagaStatusResponse: MessageFns<SagaStatusResponse> = {
  encode(message: SagaStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.currentStep !== "") {
      writer.uint32(18).string(message.currentStep);
    }
    if (message.updatedAt !== "") {
      writer.uint32(26).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SagaStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSagaStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currentStep = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface SagaServiceClient {
  getSagaStatus(request: SagaIdRequest): Observable<SagaStatusResponse>;
}

export interface SagaServiceController {
  getSagaStatus(
    request: SagaIdRequest,
  ): Promise<SagaStatusResponse> | Observable<SagaStatusResponse> | SagaStatusResponse;
}

export function SagaServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getSagaStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SagaService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SagaService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SAGA_SERVICE_NAME = "SagaService";

export type SagaServiceService = typeof SagaServiceService;
export const SagaServiceService = {
  getSagaStatus: {
    path: "/saga.SagaService/GetSagaStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SagaIdRequest) => Buffer.from(SagaIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SagaIdRequest.decode(value),
    responseSerialize: (value: SagaStatusResponse) => Buffer.from(SagaStatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SagaStatusResponse.decode(value),
  },
} as const;

export interface SagaServiceServer extends UntypedServiceImplementation {
  getSagaStatus: handleUnaryCall<SagaIdRequest, SagaStatusResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
